In this lab assignment, the primary technique used for optimization is titling, which increases cache hit rates by improving spatial locality and temporal locality. The general idea behind this technique is to divide and conquer. The source image in divided into smaller blocks and rotation is performed on these blocks. By using a sufficiently small image blocks size, a row of an image block can fit into a set in the cache. The locality is significantly improved as row of an image block can be accessed at the cost of only 1 cache miss.  

In the ug workstation, the L1 data cache is 32KB in size. It has 8 ways of associativity and 64 sets. A line of cache is 64 Byte in size and a set of cache is 512 Byte. In theory, a set of cache can store up to 85 pixels. However, since the image block is set to be in square shape, the maximum dimension is bounded by the number of sets. The largest dimension possible is 32. By conducting tests using 32, 16, and 8 as dimension, 16 showed the best performance. This is possibly caused by the fact L1 data cache is shared with OS and other programs. Fully utilize the cache without considering other programs cased unintended slow down and cache misses.  

In addition, to improve the bottlenecks in cache read and write, the position of horizontal and vertical loops are interchanged. Instead of looping in vertical direction first (in destination image), the optimized rotate function writes the pixels in the same row first (and then moves up in vertical direction). This signification improved spatial locality by sacrificing a small amount of read performance, resulting in significant overall performance improvement.

To further improve the performance, loop unrolling is performed to the most inner loop. The function inlining is performed to the function that calculates the pixel location. Multiplication operations are converted to addition wherever possible. Code motion is also performed to avoid repeated computation of loop invariants 
